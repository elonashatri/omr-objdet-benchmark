module load miniconda/4.7.12
module load cuda/12.1  # Using CUDA 12.1 for compatibility with recent PyTorch



conda activate omr_benchmark








# Load miniconda module
module load miniconda/4.7.12

# Create a new environment for OMR experiments
conda create -n omr_benchmark python=3.10 -y


training faster r-cnn

nohup python /homes/es314/omr-objdet-benchmark/scripts/faster_rccn_training.py \
    --data_dir data/images \
    --annotation_dir data/annotations \
    --class_mapping data/class_mapping.json \
    --output_dir results/faster_rcnn \
    --pretrained \
    --batch_size 1 \
    --epochs 30 \
    --optimizer adamw \
    --lr 0.0001 \
    --clip_grad_norm 1.0 \
    --val_ratio 0.2 \
    --gpu_id 1


nohup python scripts/yolo_training.py \
    --data_dir data/images \
    --annotation_dir data/annotations \
    --class_mapping data/class_mapping.json \
    --output_dir results/yolov8 \
    --model yolov8s.pt \
    --batch_size 16 \
    --epochs 30 \
    --gpu_id 2 > yolo_training.txt



python scripts/yolo_training.py \
    --data_dir data/images \
    --annotation_dir data/annotations \
    --class_mapping data/class_mapping.json \
    --analyze_only


nohup scripts/yolo_training.py \
    --data_dir data/images \
    --annotation_dir data/annotations \
    --class_mapping data/class_mapping.json \
    --output_dir results/yolov8 \
    --model yolov8n.pt \
    --batch_size 8 \
    --epochs 30 \
    --min_box_size 10 \
    --conf_threshold 0.001 \
    --gpu_id 1 \
    --debug > yolo_training_1.txt


python scripts/yolo_training.py \
    --data_dir data/images \
    --annotation_dir data/annotations \
    --class_mapping data/class_mapping.json \
    --output_dir results/yolov8 \
    --model yolov8s.pt \  # Using small model instead of nano for better accuracy
    --batch_size 32 \
    --epochs 50 \  # More epochs for better convergence
    --conf_threshold 0.001 \  # Keep low confidence threshold
    --gpu_id 2 \
    --workers 4  > yolo_training_1.txt